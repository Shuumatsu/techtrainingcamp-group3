// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: user.proto

package service_user

import (
	"fmt"
	"io"
	"math"

	proto "github.com/golang/protobuf/proto"

	context "golang.org/x/net/context"

	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Envelope struct {
	EnvelopeId           uint64   `protobuf:"varint,1,opt,name=EnvelopeId,proto3" json:"EnvelopeId,omitempty"`
	Opened               bool     `protobuf:"varint,2,opt,name=Opened,proto3" json:"Opened,omitempty"`
	Value                uint64   `protobuf:"varint,3,opt,name=Value,proto3" json:"Value,omitempty"`
	SnatchTime           int64    `protobuf:"varint,4,opt,name=SnatchTime,proto3" json:"SnatchTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Envelope) Reset()         { *m = Envelope{} }
func (m *Envelope) String() string { return proto.CompactTextString(m) }
func (*Envelope) ProtoMessage()    {}
func (*Envelope) Descriptor() ([]byte, []int) {
	return fileDescriptor_user_1807e2a5bbb58455, []int{0}
}
func (m *Envelope) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Envelope) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Envelope.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Envelope) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Envelope.Merge(dst, src)
}
func (m *Envelope) XXX_Size() int {
	return m.Size()
}
func (m *Envelope) XXX_DiscardUnknown() {
	xxx_messageInfo_Envelope.DiscardUnknown(m)
}

var xxx_messageInfo_Envelope proto.InternalMessageInfo

func (m *Envelope) GetEnvelopeId() uint64 {
	if m != nil {
		return m.EnvelopeId
	}
	return 0
}

func (m *Envelope) GetOpened() bool {
	if m != nil {
		return m.Opened
	}
	return false
}

func (m *Envelope) GetValue() uint64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *Envelope) GetSnatchTime() int64 {
	if m != nil {
		return m.SnatchTime
	}
	return 0
}

type SnatchEnevelopeReq struct {
	UserId               uint64   `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SnatchEnevelopeReq) Reset()         { *m = SnatchEnevelopeReq{} }
func (m *SnatchEnevelopeReq) String() string { return proto.CompactTextString(m) }
func (*SnatchEnevelopeReq) ProtoMessage()    {}
func (*SnatchEnevelopeReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_user_1807e2a5bbb58455, []int{1}
}
func (m *SnatchEnevelopeReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SnatchEnevelopeReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SnatchEnevelopeReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SnatchEnevelopeReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SnatchEnevelopeReq.Merge(dst, src)
}
func (m *SnatchEnevelopeReq) XXX_Size() int {
	return m.Size()
}
func (m *SnatchEnevelopeReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SnatchEnevelopeReq.DiscardUnknown(m)
}

var xxx_messageInfo_SnatchEnevelopeReq proto.InternalMessageInfo

func (m *SnatchEnevelopeReq) GetUserId() uint64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type SnatchEnevelopeReply struct {
	EnvelopeId           uint64   `protobuf:"varint,1,opt,name=EnvelopeId,proto3" json:"EnvelopeId,omitempty"`
	EnvelopesCount       uint64   `protobuf:"varint,2,opt,name=EnvelopesCount,proto3" json:"EnvelopesCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SnatchEnevelopeReply) Reset()         { *m = SnatchEnevelopeReply{} }
func (m *SnatchEnevelopeReply) String() string { return proto.CompactTextString(m) }
func (*SnatchEnevelopeReply) ProtoMessage()    {}
func (*SnatchEnevelopeReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_user_1807e2a5bbb58455, []int{2}
}
func (m *SnatchEnevelopeReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SnatchEnevelopeReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SnatchEnevelopeReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SnatchEnevelopeReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SnatchEnevelopeReply.Merge(dst, src)
}
func (m *SnatchEnevelopeReply) XXX_Size() int {
	return m.Size()
}
func (m *SnatchEnevelopeReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SnatchEnevelopeReply.DiscardUnknown(m)
}

var xxx_messageInfo_SnatchEnevelopeReply proto.InternalMessageInfo

func (m *SnatchEnevelopeReply) GetEnvelopeId() uint64 {
	if m != nil {
		return m.EnvelopeId
	}
	return 0
}

func (m *SnatchEnevelopeReply) GetEnvelopesCount() uint64 {
	if m != nil {
		return m.EnvelopesCount
	}
	return 0
}

type OpenEnvelopeReq struct {
	UserId               uint64   `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	EnvelopeId           uint64   `protobuf:"varint,2,opt,name=EnvelopeId,proto3" json:"EnvelopeId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OpenEnvelopeReq) Reset()         { *m = OpenEnvelopeReq{} }
func (m *OpenEnvelopeReq) String() string { return proto.CompactTextString(m) }
func (*OpenEnvelopeReq) ProtoMessage()    {}
func (*OpenEnvelopeReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_user_1807e2a5bbb58455, []int{3}
}
func (m *OpenEnvelopeReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OpenEnvelopeReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OpenEnvelopeReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *OpenEnvelopeReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpenEnvelopeReq.Merge(dst, src)
}
func (m *OpenEnvelopeReq) XXX_Size() int {
	return m.Size()
}
func (m *OpenEnvelopeReq) XXX_DiscardUnknown() {
	xxx_messageInfo_OpenEnvelopeReq.DiscardUnknown(m)
}

var xxx_messageInfo_OpenEnvelopeReq proto.InternalMessageInfo

func (m *OpenEnvelopeReq) GetUserId() uint64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *OpenEnvelopeReq) GetEnvelopeId() uint64 {
	if m != nil {
		return m.EnvelopeId
	}
	return 0
}

type OpenEnvelopeReply struct {
	Value                uint64   `protobuf:"varint,1,opt,name=Value,proto3" json:"Value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OpenEnvelopeReply) Reset()         { *m = OpenEnvelopeReply{} }
func (m *OpenEnvelopeReply) String() string { return proto.CompactTextString(m) }
func (*OpenEnvelopeReply) ProtoMessage()    {}
func (*OpenEnvelopeReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_user_1807e2a5bbb58455, []int{4}
}
func (m *OpenEnvelopeReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OpenEnvelopeReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OpenEnvelopeReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *OpenEnvelopeReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpenEnvelopeReply.Merge(dst, src)
}
func (m *OpenEnvelopeReply) XXX_Size() int {
	return m.Size()
}
func (m *OpenEnvelopeReply) XXX_DiscardUnknown() {
	xxx_messageInfo_OpenEnvelopeReply.DiscardUnknown(m)
}

var xxx_messageInfo_OpenEnvelopeReply proto.InternalMessageInfo

func (m *OpenEnvelopeReply) GetValue() uint64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type ListEnvelopesReq struct {
	UserId               uint64   `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListEnvelopesReq) Reset()         { *m = ListEnvelopesReq{} }
func (m *ListEnvelopesReq) String() string { return proto.CompactTextString(m) }
func (*ListEnvelopesReq) ProtoMessage()    {}
func (*ListEnvelopesReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_user_1807e2a5bbb58455, []int{5}
}
func (m *ListEnvelopesReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListEnvelopesReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListEnvelopesReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ListEnvelopesReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListEnvelopesReq.Merge(dst, src)
}
func (m *ListEnvelopesReq) XXX_Size() int {
	return m.Size()
}
func (m *ListEnvelopesReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ListEnvelopesReq.DiscardUnknown(m)
}

var xxx_messageInfo_ListEnvelopesReq proto.InternalMessageInfo

func (m *ListEnvelopesReq) GetUserId() uint64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type ListEnvelopesReply struct {
	Envelopes            []*Envelope `protobuf:"bytes,1,rep,name=Envelopes" json:"Envelopes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ListEnvelopesReply) Reset()         { *m = ListEnvelopesReply{} }
func (m *ListEnvelopesReply) String() string { return proto.CompactTextString(m) }
func (*ListEnvelopesReply) ProtoMessage()    {}
func (*ListEnvelopesReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_user_1807e2a5bbb58455, []int{6}
}
func (m *ListEnvelopesReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListEnvelopesReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListEnvelopesReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ListEnvelopesReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListEnvelopesReply.Merge(dst, src)
}
func (m *ListEnvelopesReply) XXX_Size() int {
	return m.Size()
}
func (m *ListEnvelopesReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ListEnvelopesReply.DiscardUnknown(m)
}

var xxx_messageInfo_ListEnvelopesReply proto.InternalMessageInfo

func (m *ListEnvelopesReply) GetEnvelopes() []*Envelope {
	if m != nil {
		return m.Envelopes
	}
	return nil
}

func init() {
	proto.RegisterType((*Envelope)(nil), "service.user.Envelope")
	proto.RegisterType((*SnatchEnevelopeReq)(nil), "service.user.SnatchEnevelopeReq")
	proto.RegisterType((*SnatchEnevelopeReply)(nil), "service.user.SnatchEnevelopeReply")
	proto.RegisterType((*OpenEnvelopeReq)(nil), "service.user.OpenEnvelopeReq")
	proto.RegisterType((*OpenEnvelopeReply)(nil), "service.user.OpenEnvelopeReply")
	proto.RegisterType((*ListEnvelopesReq)(nil), "service.user.ListEnvelopesReq")
	proto.RegisterType((*ListEnvelopesReply)(nil), "service.user.ListEnvelopesReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for User service

type UserClient interface {
	SnatchEnevelope(ctx context.Context, in *SnatchEnevelopeReq, opts ...grpc.CallOption) (*SnatchEnevelopeReply, error)
	OpenEnvelope(ctx context.Context, in *OpenEnvelopeReq, opts ...grpc.CallOption) (*OpenEnvelopeReply, error)
	ListEnvelopes(ctx context.Context, in *ListEnvelopesReq, opts ...grpc.CallOption) (*ListEnvelopesReply, error)
}

type userClient struct {
	cc *grpc.ClientConn
}

func NewUserClient(cc *grpc.ClientConn) UserClient {
	return &userClient{cc}
}

func (c *userClient) SnatchEnevelope(ctx context.Context, in *SnatchEnevelopeReq, opts ...grpc.CallOption) (*SnatchEnevelopeReply, error) {
	out := new(SnatchEnevelopeReply)
	err := c.cc.Invoke(ctx, "/service.user.User/SnatchEnevelope", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) OpenEnvelope(ctx context.Context, in *OpenEnvelopeReq, opts ...grpc.CallOption) (*OpenEnvelopeReply, error) {
	out := new(OpenEnvelopeReply)
	err := c.cc.Invoke(ctx, "/service.user.User/OpenEnvelope", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) ListEnvelopes(ctx context.Context, in *ListEnvelopesReq, opts ...grpc.CallOption) (*ListEnvelopesReply, error) {
	out := new(ListEnvelopesReply)
	err := c.cc.Invoke(ctx, "/service.user.User/ListEnvelopes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for User service

type UserServer interface {
	SnatchEnevelope(context.Context, *SnatchEnevelopeReq) (*SnatchEnevelopeReply, error)
	OpenEnvelope(context.Context, *OpenEnvelopeReq) (*OpenEnvelopeReply, error)
	ListEnvelopes(context.Context, *ListEnvelopesReq) (*ListEnvelopesReply, error)
}

func RegisterUserServer(s *grpc.Server, srv UserServer) {
	s.RegisterService(&_User_serviceDesc, srv)
}

func _User_SnatchEnevelope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SnatchEnevelopeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).SnatchEnevelope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.user.User/SnatchEnevelope",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).SnatchEnevelope(ctx, req.(*SnatchEnevelopeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_OpenEnvelope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenEnvelopeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).OpenEnvelope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.user.User/OpenEnvelope",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).OpenEnvelope(ctx, req.(*OpenEnvelopeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_ListEnvelopes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEnvelopesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).ListEnvelopes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.user.User/ListEnvelopes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).ListEnvelopes(ctx, req.(*ListEnvelopesReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _User_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.user.User",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SnatchEnevelope",
			Handler:    _User_SnatchEnevelope_Handler,
		},
		{
			MethodName: "OpenEnvelope",
			Handler:    _User_OpenEnvelope_Handler,
		},
		{
			MethodName: "ListEnvelopes",
			Handler:    _User_ListEnvelopes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}

func (m *Envelope) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Envelope) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EnvelopeId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.EnvelopeId))
	}
	if m.Opened {
		dAtA[i] = 0x10
		i++
		if m.Opened {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Value != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.Value))
	}
	if m.SnatchTime != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.SnatchTime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SnatchEnevelopeReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SnatchEnevelopeReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.UserId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SnatchEnevelopeReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SnatchEnevelopeReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EnvelopeId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.EnvelopeId))
	}
	if m.EnvelopesCount != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.EnvelopesCount))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *OpenEnvelopeReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OpenEnvelopeReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.UserId))
	}
	if m.EnvelopeId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.EnvelopeId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *OpenEnvelopeReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OpenEnvelopeReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Value != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.Value))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ListEnvelopesReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListEnvelopesReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.UserId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ListEnvelopesReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListEnvelopesReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Envelopes) > 0 {
		for _, msg := range m.Envelopes {
			dAtA[i] = 0xa
			i++
			i = encodeVarintUser(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintUser(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Envelope) Size() (n int) {
	var l int
	_ = l
	if m.EnvelopeId != 0 {
		n += 1 + sovUser(uint64(m.EnvelopeId))
	}
	if m.Opened {
		n += 2
	}
	if m.Value != 0 {
		n += 1 + sovUser(uint64(m.Value))
	}
	if m.SnatchTime != 0 {
		n += 1 + sovUser(uint64(m.SnatchTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SnatchEnevelopeReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUser(uint64(m.UserId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SnatchEnevelopeReply) Size() (n int) {
	var l int
	_ = l
	if m.EnvelopeId != 0 {
		n += 1 + sovUser(uint64(m.EnvelopeId))
	}
	if m.EnvelopesCount != 0 {
		n += 1 + sovUser(uint64(m.EnvelopesCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OpenEnvelopeReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUser(uint64(m.UserId))
	}
	if m.EnvelopeId != 0 {
		n += 1 + sovUser(uint64(m.EnvelopeId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OpenEnvelopeReply) Size() (n int) {
	var l int
	_ = l
	if m.Value != 0 {
		n += 1 + sovUser(uint64(m.Value))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListEnvelopesReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUser(uint64(m.UserId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListEnvelopesReply) Size() (n int) {
	var l int
	_ = l
	if len(m.Envelopes) > 0 {
		for _, e := range m.Envelopes {
			l = e.Size()
			n += 1 + l + sovUser(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovUser(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozUser(x uint64) (n int) {
	return sovUser(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Envelope) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Envelope: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Envelope: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnvelopeId", wireType)
			}
			m.EnvelopeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EnvelopeId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Opened", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Opened = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SnatchTime", wireType)
			}
			m.SnatchTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SnatchTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SnatchEnevelopeReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SnatchEnevelopeReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SnatchEnevelopeReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SnatchEnevelopeReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SnatchEnevelopeReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SnatchEnevelopeReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnvelopeId", wireType)
			}
			m.EnvelopeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EnvelopeId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnvelopesCount", wireType)
			}
			m.EnvelopesCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EnvelopesCount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OpenEnvelopeReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OpenEnvelopeReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OpenEnvelopeReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnvelopeId", wireType)
			}
			m.EnvelopeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EnvelopeId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OpenEnvelopeReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OpenEnvelopeReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OpenEnvelopeReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListEnvelopesReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListEnvelopesReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListEnvelopesReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListEnvelopesReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListEnvelopesReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListEnvelopesReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Envelopes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Envelopes = append(m.Envelopes, &Envelope{})
			if err := m.Envelopes[len(m.Envelopes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipUser(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowUser
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUser
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUser
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthUser
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowUser
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipUser(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthUser = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowUser   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("user.proto", fileDescriptor_user_1807e2a5bbb58455) }

var fileDescriptor_user_1807e2a5bbb58455 = []byte{
	// 344 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x53, 0xcd, 0x4a, 0xf3, 0x40,
	0x14, 0xfd, 0xa6, 0xcd, 0x57, 0xea, 0xb5, 0xda, 0x3a, 0x94, 0x12, 0x0a, 0x8e, 0xc3, 0x2c, 0x24,
	0x8a, 0x64, 0x51, 0x7d, 0x02, 0xa5, 0x8b, 0x8a, 0x28, 0xc6, 0xbf, 0x9d, 0x50, 0xdb, 0x0b, 0x16,
	0x62, 0x12, 0xf3, 0x53, 0xec, 0xd6, 0xa7, 0xf0, 0x91, 0x5c, 0xfa, 0x08, 0x12, 0x5f, 0x44, 0x26,
	0x69, 0x62, 0x32, 0x85, 0x74, 0x97, 0x73, 0xe6, 0xde, 0x73, 0xce, 0x9c, 0x21, 0x00, 0x51, 0x80,
	0xbe, 0xe9, 0xf9, 0x6e, 0xe8, 0xd2, 0x56, 0x80, 0xfe, 0x7c, 0x36, 0x41, 0x53, 0x72, 0xe2, 0x0d,
	0x9a, 0x43, 0x67, 0x8e, 0xb6, 0xeb, 0x21, 0x65, 0x00, 0xd9, 0xf7, 0x68, 0xaa, 0x13, 0x4e, 0x0c,
	0xcd, 0x2a, 0x30, 0xb4, 0x07, 0x8d, 0x2b, 0x0f, 0x1d, 0x9c, 0xea, 0x35, 0x4e, 0x8c, 0xa6, 0xb5,
	0x44, 0xb4, 0x0b, 0xff, 0xef, 0xc7, 0x76, 0x84, 0x7a, 0x3d, 0x59, 0x49, 0x81, 0x54, 0xbb, 0x71,
	0xc6, 0xe1, 0xe4, 0xf9, 0x76, 0xf6, 0x82, 0xba, 0xc6, 0x89, 0x51, 0xb7, 0x0a, 0x8c, 0x38, 0x02,
	0x9a, 0xa2, 0xa1, 0x83, 0xa9, 0x85, 0x85, 0xaf, 0xd2, 0xe3, 0x2e, 0x40, 0x3f, 0xf7, 0x5f, 0x22,
	0xf1, 0x08, 0xdd, 0x95, 0x69, 0xcf, 0x5e, 0xac, 0xcd, 0xbc, 0x0f, 0xdb, 0x19, 0x0a, 0xce, 0xdc,
	0xc8, 0x09, 0x93, 0xec, 0x9a, 0xa5, 0xb0, 0x62, 0x04, 0x6d, 0x79, 0x9b, 0x8c, 0xad, 0x88, 0xa2,
	0x58, 0xd6, 0x54, 0x4b, 0x71, 0x00, 0x3b, 0x65, 0x29, 0x99, 0x33, 0xef, 0x88, 0x14, 0x3a, 0x12,
	0x87, 0xd0, 0xb9, 0x98, 0x05, 0x61, 0x9e, 0xa5, 0xaa, 0x81, 0x73, 0xa0, 0xca, 0xac, 0xd4, 0x3d,
	0x81, 0x8d, 0x9c, 0xd1, 0x09, 0xaf, 0x1b, 0x9b, 0x83, 0x9e, 0x59, 0x7c, 0x61, 0x33, 0xcf, 0xf1,
	0x37, 0x38, 0x78, 0xaf, 0x81, 0x26, 0x65, 0xe9, 0x03, 0xb4, 0x95, 0x5a, 0x29, 0x2f, 0xaf, 0xaf,
	0xbe, 0x51, 0x5f, 0xac, 0x99, 0x90, 0xb9, 0x2e, 0xa1, 0x55, 0x2c, 0x81, 0xee, 0x96, 0x77, 0x94,
	0xae, 0xfb, 0x7b, 0x55, 0xc7, 0x52, 0xef, 0x1a, 0xb6, 0x4a, 0xb7, 0xa7, 0xac, 0xbc, 0xa1, 0xd6,
	0xd8, 0xe7, 0x95, 0xe7, 0x9e, 0xbd, 0x38, 0xed, 0x7c, 0xc6, 0x8c, 0x7c, 0xc5, 0x8c, 0x7c, 0xc7,
	0x8c, 0x7c, 0xfc, 0xb0, 0x7f, 0x4f, 0x8d, 0xe4, 0x0f, 0x39, 0xfe, 0x0d, 0x00, 0x00, 0xff, 0xff,
	0x7c, 0x71, 0x5a, 0x9f, 0x2f, 0x03, 0x00, 0x00,
}
